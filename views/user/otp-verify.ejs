<%- include('../layout/header') %>


<section class="vh-100">
    <div class="container py-5 h-100">
      <div class="rowotp d-flex justify-content-center align-items-center h-100">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
          <div class="card shadow-2-strong" style="border-radius: 1rem;">
            <div class="card-body p-5 text-center">
  
              <h3 class="mb-5">OTP Verification</h3>
  <form action="/verifyOtp" method="post">
              <div>
                <label class="form-label" for="typePasswordX">OTP</label>
                <div id="otp" class="otp-field mb-4">
                    <input name="otp" type="text" maxlength="1" id="first"  required/>
                    <input name="otp" type="text" maxlength="1" id="second" required/>
                    <input name="otp" class="space" type="text" id="third" maxlength="1" required/>
                    <input name="otp" type="text" maxlength="1" id="fourth" required/>
                    <input name="otp" type="text" maxlength="1" id="fifth" required/>
                    <input name="otp" type="text" maxlength="1" id="sixth" required/>
                  </div>
              </div>
  
              <button class="btn btn-primary btn-lg btn-block" type="submit">Submit</button>
            </form>
              <hr class="my-4">
  
             
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    const inputs = document.querySelectorAll(".otp-field input");

    inputs.forEach((input, index) => {
    input.dataset.index = index;
    input.addEventListener("keyup", handleOtp);
    input.addEventListener("paste", handleOnPasteOtp);
    });

    function handleOtp(e) {
    /**
     * <input type="text" ðŸ‘‰ maxlength="1" />
     * ðŸ‘‰ NOTE: On mobile devices maxlength property isn't supported,
     * So we to write our own logic to make it work. ðŸ™‚
     */
    const input = e.target;
    let value = input.value;
    let isValidInput = value.match(/[0-9a-z]/gi);
    input.value = "";
    input.value = isValidInput ? value[0] : "";

    let fieldIndex = input.dataset.index;
    if (fieldIndex < inputs.length - 1 && isValidInput) {
        input.nextElementSibling.focus();
    }

    if (e.key === "Backspace" && fieldIndex > 0) {
        input.previousElementSibling.focus();
    }

    // if (fieldIndex == inputs.length - 1 && isValidInput) {
    //     submit();
    // }
    }

    function handleOnPasteOtp(e) {
    const data = e.clipboardData.getData("text");
    const value = data.split("");
        if (value.length === inputs.length) {
            inputs.forEach((input, index) => (input.value = value[index]));
            submit();   
        }
    }

    // function submit() {
    // console.log("Submitting...");
    // // ðŸ‘‡ Entered OTP
    // let otp = "";
    // inputs.forEach((input) => {
    //     otp += input.value;
    //     input.disabled = true;
    //     input.classList.add("disabled");
    // });
    // console.log(otp);
    // // ðŸ‘‰ Call API below
    // }
</script>